#pragma once

#include "gsw_eval.h"
#include "pir.h"
#include <optional>

#define RAW_DB_FILE "./rawDB.bin"

// typedef std::vector<std::optional<seal::Plaintext>> DatabaseChunk;  // 256 plaintexts
typedef std::unique_ptr<std::optional<seal::Plaintext>[]> DatabaseChunk;  // Heap allocation for N_1 plaintexts
typedef std::unique_ptr<std::optional<seal::Plaintext>[]> Database;       // One consecutive huge vector for the entire database on heap

class PirServer {
public:
  PirServer(const PirParams &pir_params);
  ~PirServer();

  /**
   * Generate random data for the server database and directly set the database.
   * It pushes the data to the database in chunks.
   */
  void gen_data();

  // push one chunk of entry to the given database
  void push_database_chunk(std::vector<Entry> &chunk_entry, const size_t chunk_idx);

  // Given the client id and a packed client query, this function first unpacks the query, then returns the retrieved encrypted result.
  std::vector<seal::Ciphertext> make_query(const size_t client_id, std::stringstream &query_stream);

  /**
   * @brief A clever way to evaluate the external product for second to last dimensions. 
   * 
   * @param result The BFV ciphertexts
   * @param selection_cipher A single RGSW(b) ciphertext, where b \in {0, 1}. 0 to get the first half of the result, 1 to get the second half.
   */
  void other_dim_mux(std::vector<seal::Ciphertext> &result, GSWCiphertext &selection_cipher);
  
  void set_client_galois_key(const size_t client_id, std::stringstream &gsw_stream);
  void set_client_gsw_key(const size_t client_id, std::stringstream &gsw_stream);

  /**
  Asking the server to return the entry at the given (abstract) index.
  This is not doing PIR. So this reveals the index to the server. This is
  only for testing purposes.
  */
  Entry direct_get_entry(const size_t index) const;

  friend class PirTest;

private:
  size_t num_pt_;
  seal::SEALContext context_;
  seal::Evaluator evaluator_;
  std::vector<size_t> dims_;
  std::map<size_t, seal::GaloisKeys> client_galois_keys_;
  std::map<size_t, GSWCiphertext> client_gsw_keys_;
  Database db_; // pointer to the entire database vector
  std::unique_ptr<uint64_t[]> db_aligned_; // aligned database for fast first dim
  std::vector<uint128_t> inter_res_; // pointer to the intermediate result vector for fst dim
  PirParams pir_params_;
  GSWEval key_gsw_;
  GSWEval data_gsw_;

  // Expands the query BFV ciphertext into a vector of BFV ciphertexts,
  // where the first DatabaseConstants::MaxFstDim many ciphertexts is the first dimension query,
  // and the rest will be used to reconstruct the RGSW ciphertexts for the other dimensions.
  std::vector<seal::Ciphertext> expand_query(size_t client_id, seal::Ciphertext &ciphertext) const;

  // we apply new techniques to avoid trivial splits on zero ciphertexts.
  // Notice that a large portion of the query is zero, and they are generated by
  // splitting some zero ciphertexts. Trivial split are the ones that split the
  // zero ciphertexts into two zero ciphertexts. However, to do this, we must
  // make sure that all the first dimension is in the same expansion sub-tree.
  // The expand query used in Cheetah is not suitable for this, though we don't
  // need special permutation for packing when using it.
  std::vector<seal::Ciphertext> fast_expand_qry(size_t client_id, seal::Ciphertext &ciphertext) const;
  
  // high level: homomorphic matrix vector multiplication between plaintext database and query ciphertext
  // input selection_vector should stay in coefficient form.
  // output will be in coefficient form.
  std::vector<seal::Ciphertext> evaluate_first_dim(std::vector<seal::Ciphertext> &selection_vector);

  // This is a helper for evaluate the first dimension. 
  // Instead of doing a mod operation after every addition and multiplication during the matrix multiplication,
  // we delay the mod operation until the end. We also use barret reduction for the mod operation.
  void delay_modulus(std::vector<seal::Ciphertext> &result, const uint128_t *__restrict inter_res);
  
  // Transforms the plaintexts in the database into their NTT representation.
  // This speeds up computation but takes up more memory.  
  void preprocess_ntt();
  //Â Realign the database so that the first dimension calculation is in a contiguous memory.
  void realign_db();

  // Fill the intermediate_db_ with some ciphertext. We just need to allocate the memory.
  void fill_inter_res();

  // write one chunk of the database to a binary file in CACHE_DIR
  void write_one_chunk(std::vector<Entry> &chunk);
};
